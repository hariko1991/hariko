Zookeeper在pafa5中，起到非常关键的作用（服务注册中心、配置中心、调度控制中心）。

说明：

1. 安装版本：Zookeeper-3.4.6及以上版本.
2. Zookeeper自带集群功能，节点之间会自动进行数据同步。
3. Zookeeper节点间数据同步的容错机制：投票机制。所以Zookeeper集群的节点数必须为单数，开发环境安装1节点，测试和生产至少安装3节点作为1个集群
4. Zookeeper中，默认的数据大小限制为1M。

注：Pafa5.2版本中，Zookeeper同时作为组件仓库，部分包会超过1M，所以必须修改环境变量：jute.maxbuffer来改变这个限制。否则会导致Zookeeper不可用。



配置说明
zoo.cfg
 config/zoo.cfg，为Zookeeper的关键配置文件

  关键配置项：clientPort（端口号）、集群配置(server.X)、数据文件存储目录(dataDir)。

# The number of milliseconds of each tick
tickTime=2000
# The number of ticks that the initial
# synchronization phase can take
initLimit=10
# The number of ticks that can pass between
# sending a request and getting an acknowledgement
syncLimit=5
# the directory where the snapshot is stored.
# do not use /tmp for storage, /tmp here is just
# example sakes.
dataDir=/wls/ntsstp/zkdata
# the port at which the clients will connect
clientPort=2181
#
# Be sure to read the maintenance section of the
# administrator guide before turning on autopurge.
#
# http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance
#
# The number of snapshots to retain in dataDir
#autopurge.snapRetainCount=3
# Purge task interval in hours
# Set to "0" to disable auto purge feature
#autopurge.purgeInterval=1
#cluster configs
#server.1=10.20.15.37:2888:3888
#server.2=10.20.15.44:2888:3888
#server.3=10.20.15.116:2888:3888


配置项说明：

参数名

说明

clientPort

客户端连接server的端口，即对外服务端口，一般设置为2181吧。

dataDir

存储快照文件snapshot的目录。默认情况下，事务日志也会存储在这里。

建议同时配置参数dataLogDir, 事务日志的写性能直接影响zk性能。

tickTime

ZK中的一个时间单元。ZK中所有时间都是以这个时间单元为基础，进行整数倍配置的。

例如，session的最小超时时间是2*tickTime。

dataLogDir

事务日志输出目录。尽量给事务日志的输出配置单独的磁盘或是挂载点，这将极大的提升ZK性能。 

（No Java system property）

globalOutstandingLimit

最大请求堆积数。默认是1000。ZK运行的时候， 尽管server已经没有空闲来处理更多的客户端请求了，但是还是允许客户端将请求提交到服务器上来，以提高吞吐性能。当然，为了防止Server内存溢出，这个请求堆积数还是需要限制下的。

 (Java system property:zookeeper.globalOutstandingLimit.)

preAllocSize

预先开辟磁盘空间，用于后续写入事务日志。默认是64M，每个事务日志大小就是64M。如果ZK的快照频率较大的话，建议适当减小这个参数。

(Java system property:zookeeper.preAllocSize)

snapCount

每进行snapCount次事务日志输出后，触发一次快照(snapshot), 此时，ZK会生成一个snapshot.文件，同时创建一个新的事务日志文件log.。默认是100000.（真正的代码实现中，会进行一定的随机数处理，以避免所有服务器在同一时间进行快照而影响性能）

(Java system property:zookeeper.snapCount)

traceFile

用于记录所有请求的log，一般调试过程中可以使用，但是生产环境不建议使用，会严重影响性能。

(Java system property:? requestTraceFile)

maxClientCnxns

单个客户端与单台服务器之间的连接数的限制，是ip级别的，默认是60，如果设置为0，那么表明不作任何限制。

请注意这个限制的使用范围，仅仅是单台客户端机器与单台ZK服务器之间的连接数限制，不是针对指定客户端IP，也不是ZK集群的连接数限制，也不是单台ZK对所有客户端的连接数限制。指定客户端IP的限制策略，这里有一个patch，可以尝试一下：{+}http://rdc.taobao.com/team/jm/archives/1334+（No Java system property）

clientPortAddress

对于多网卡的机器，可以为每个IP指定不同的监听端口。

默认情况是所有IP都监听 clientPort指定的端口。 New in 3.3.0

minSessionTimeoutmaxSessionTimeout

Session超时时间限制，如果客户端设置的超时时间不在这个范围，那么会被强制设置为最大或最小时间。

默认的Session超时时间是在2  tickTime ~ 20 * tickTime 这个范围 New in 3.3.0*

fsync.warningthresholdms

事务日志输出时，如果调用fsync方法超过指定的超时时间，那么会在日志中输出警告信息。默认是1000ms。

(Java system property: fsync.warningthresholdms)New in 3.3.4

autopurge.purgeInterval

在上文中已经提到，3.4.0及之后版本，ZK提供了自动清理事务日志和快照文件的功能，这个参数指定了清理频率，单位是小时，需要配置一个1或更大的整数，默认是0，表示不开启自动清理功能。

(No Java system property) New in 3.4.0

autopurge.snapRetainCount

这个参数和上面的参数搭配使用，这个参数指定了需要保留的文件数目。默认是保留3个。

(No Java system property) New in 3.4.0

electionAlg

在之前的版本中， 这个参数配置是允许我们选择leader选举算法，但是由于在以后的版本中，只会留下一种"TCP-based version of fast leader election"算法，所以这个参数目前看来没有用了，这里也不详细展开说了。

(No Java system property)

initLimit

Follower在启动过程中，会从Leader同步所有最新数据，然后确定自己能够对外服务的起始状态。Leader允许F在initLimit时间内完成这个工作。通常情况下，我们不用太在意这个参数的设置。如果ZK集群的数据量确实很大了，F在启动的时候，从Leader上同步数据的时间也会相应变长，因此在这种情况下，有必要适当调大这个参数了。

(No Java system property)

syncLimit

在运行过程中，Leader负责与ZK集群中所有机器进行通信，例如通过一些心跳检测机制，来检测机器的存活状态。如果L发出心跳包在syncLimit之后，还没有从F那里收到响应，那么就认为这个F已经不在线了。注意：不要把这个参数设置得过大，否则可能会掩盖一些问题。

(No Java system property)

leaderServes

默认情况下，Leader是会接受客户端连接，并提供正常的读写服务。但是，如果你想让Leader专注于集群中机器的协调，那么可以将这个参数设置为no，这样一来，会大大提高写操作的性能。

(Java system property: zookeeper.leaderServes)。

server.x=[hostname]:nnnnn[:nnnnn]

这里的x是一个数字，与myid文件中的id是一致的。右边可以配置两个端口，第一个端口用于F和L之间的数据同步和其它通信，第二个端口用于Leader选举过程中投票通信。

 (No Java system property)

group.x=nnnnn[:nnnnn]weight.x=nnnnn

对机器分组和权重设置，可以 参见这里

(No Java system property)

cnxTimeout

Leader选举过程中，打开一次连接的超时时间，默认是5s。

(Java system property: zookeeper. cnxTimeout)

zookeeper.DigestAuthenticationProvider.superDigest

ZK权限设置相关，具体参见

skipACL

对所有客户端请求都不作ACL检查。如果之前节点上设置有权限限制，一旦服务器上打开这个开头，那么也将失效。

(Java system property: zookeeper.skipACL)

forceSync

这个参数确定了是否需要在事务日志提交的时候调用FileChannel.force来保证数据完全同步到磁盘。

(Java system property: zookeeper.forceSync)

jute.maxbuffer

每个节点最大数据量，是默认是1M。这个限制必须在server和client端都进行设置才会生效。

(Java system property: jute.maxbuffer)



jute.maxbuffer
Zookeeper的节点数据，默认最大为1M。

在Pafa5.2版本中，Zookeeper作为组件仓库，部分组件大小会超过1M。需要通过设置JVM环境变量：jute.maxbuffer来更改限制。

在测试环境和生产环境，切记更改配置jute.maxbuffer，并确认，否则Zookeeper会出现不可用的情况。

进入Bin目录，打开ZkEnv.sh文件，在末尾增加一行配置

JVMFLAGS="-Djute.maxbuffer=5242880 -Xms256m -Xmx1g"
         此配置项，可以同时调整JVM参数，根据需要增加或调整参数。



ZKEnv.sh

ZkEnv.sh
...
#make it work for developers
CLASSPATH="$ZOOBINDIR/../build/classes:$CLASSPATH"
 
case "`uname`" in
    CYGWIN*) cygwin=true ;;
    *) cygwin=false ;;
esac
 
if $cygwin
then
    CLASSPATH=`cygpath -wp "$CLASSPATH"`
fi
 
#echo "CLASSPATH=$CLASSPATH"
   
JVMFLAGS="-Djute.maxbuffer=5242880 -Xms256m -Xmx1g"


Log配置
修改log4j.properties中配置，调整zookeeper日志输出目录

zookeeper.root.logger=INFO, ROLLINGFILE
zookeeper.console.threshold=INFO
zookeeper.log.dir=/tmp/logs
zookeeper.log.file=zookeeper.log
zookeeper.log.threshold=DEBUG
zookeeper.tracelog.dir=${zookeeper.log.dir}
zookeeper.tracelog.file=zookeeper_trace.log
 
 
...
   

集群配置
1. 修改zoo.cfg
安装集群，至少安装三个节点，获得所有节点的IP，然后配置zoo.cfg。
注：开发环境可不建集群（单节点）

#cluster configs
server.1=10.20.15.37:52888:53888
server.2=10.20.15.44:52888:53888
server.3=10.20.15.116:52888:53888


  2. 设置myId
     在我们配置的dataDir指定的目录下面，创建一个myid文件，里面内容为一个数字，用来标识当前节点ID。

conf/zoo.cfg文件中配置的server.X中X为什么数字，则myid文件中就输入这个数字，例如：

echo "1" > /wls/ntsstp/zkdata/myid 



 3. 重启所有节点
重启所有节点，集群生效。



资源配置推荐
配置

说明
2核/4G内存/30G存储/节点

1、Zookeeper数据文件很关键， 强烈建议做好备份和容灾

2、JDK（JRE）1.7及以上。

3、节点数量：至少3节点，推荐5节点

4、推荐物理pcServer

5、推荐SSD盘

6、不建议使用网络存储，推荐本地磁盘