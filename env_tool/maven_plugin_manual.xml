<plugins>
<!-- 编译插件 maven-compiler-plugin -->
<plugin>  
    <groupId>org.apache.maven.plugins</groupId>  
    <artifactId>maven-compiler-plugin</artifactId>  
    <configuration>  
        <source>1.6</source>  <!--源代码编译版本-->
        <target>1.6</target>  <!--目标平台编译版本-->
        <encoding>UTF-8</encoding>  <!--字符集编码-->
    </configuration>  
</plugin>

<!-- 设置资源文件的编码方式 maven-resources-plugin -->
<plugin>  
    <groupId>org.apache.maven.plugins</groupId>  
    <artifactId>maven-resources-plugin</artifactId>  
    <version>2.4.3</version>  
    <executions>  
        <execution>  
            <phase>compile</phase>  
        </execution>  
    </executions>  
    <configuration>  
        <encoding>UTF-8</encoding>  
    </configuration>  
</plugin> 

<!-- 依赖插件:自动拷贝jar包到target目录 maven-dependency-plugin -->  
<plugin>  
    <groupId>org.apache.maven.plugins</groupId>  
    <artifactId>maven-dependency-plugin</artifactId>  
    <version>2.6</version>  
    <executions>  
        <execution>  
            <id>copy-dependencies</id>  
            <phase>compile</phase>  
            <goals>  
                <goal>copy-dependencies</goal>  
            </goals>  
            <configuration>  
                <!-- ${project.build.directory}为Maven内置变量，缺省为target -->  
                <outputDirectory>${project.build.directory}/lib</outputDirectory>  
                <!-- 表示是否不包含间接依赖的包 -->  
                <excludeTransitive>false</excludeTransitive>  
                <!-- 表示复制的jar文件去掉版本信息 -->  
                <stripVersion>true</stripVersion>  
            </configuration>  
        </execution>  
    </executions>  
</plugin>  

<!-- 源代码打包插件 maven-source-plugin -->  
<plugin>  
    <artifactId>maven-source-plugin</artifactId>  
    <version>2.1</version>  
    <configuration>  
        <!-- <finalName>${project.build.name}</finalName> -->  
        <attach>true</attach>  
        <encoding>${project.build.sourceEncoding}</encoding>  
    </configuration>  
    <executions>  
        <execution>  
            <phase>compile</phase>  
            <goals>  
                <goal>jar</goal>  
            </goals>  
        </execution>  
    </executions>  
</plugin>  

<!-- jar包插件:将项目打成jar包 maven-jar-plugin -->  
<plugin>  
    <groupId>org.apache.maven.plugins</groupId>  
    <artifactId>maven-jar-plugin</artifactId>  
    <version>2.4</version>  
    <configuration>  
        <archive>  
            <manifest>  
                <!-- 告知 maven-jar-plugin添加一个 Class-Path元素到 MANIFEST.MF文件，以及在Class-Path元素中包括所有依赖项 -->  
                <addClasspath>true</addClasspath>  
                <!-- 所有的依赖项应该位于 lib文件夹 -->  
                <classpathPrefix>lib/</classpathPrefix>  
                <!-- 当用户使用 lib命令执行JAR文件时，使用该元素定义将要执行的类名 -->  
                <mainClass>com.zhengtian.tools.service.phone.MobilePhoneTool</mainClass>  
            </manifest>  
        </archive>  
    </configuration>  
</plugin> 


<!-- war插件:将项目打成war包 maven-war-plugin -->  
<plugin>  
    <groupId>org.apache.maven.plugins</groupId>  
    <artifactId>maven-war-plugin</artifactId>  
    <version>2.1.1</version>  
    <configuration>  
        <!-- <warName>${project.build.name}</warName> -->  
    </configuration>  
</plugin> 

<!-- 在打包时需要清空一些指定的目录 maven-clean-plugin -->
<plugin>  
    <artifactId>maven-clean-plugin</artifactId>  
    <configuration>  
        <verbose>true</verbose>  
        <filesets>  
            <fileset>  
                <directory>c:/a</directory>  
            </fileset>  
      </filesets>  
    </configuration>  
</plugin>  


<!-- tomcat插件:利用tomcat-maven-plugin插件将项目自动打包并部署到tomcat中 tomcat-maven-plugin  -->  
<plugin>  
	<groupId>org.codehaus.mojo</groupId>  
	<artifactId>tomcat-maven-plugin</artifactId>  
	<configuration>  
		<server>tomcat6-manager</server>  
		<path>/${project.build.name}</path>  
		<url>http://localhost:8080/manager</url>  
		<username>admin</username>  
		<password>admin</password>  
	</configuration>  
	<executions>  
		<execution>  
			<phase>deploy</phase>  
			<goals>  
				<goal>deploy</goal>  
			</goals>  
		</execution>  
	</executions>  
</plugin>  

<!-- 插件管理:有时候插件检查不通过，需要人为的忽略对有些插件的检查 -->  
<plugin>  
	<groupId>org.eclipse.m2e</groupId>  
	<artifactId>lifecycle-mapping</artifactId>  
	<version>1.0.0</version>  
	<configuration>  
		<lifecycleMappingMetadata>  
			<pluginExecutions>  
				<!-- 忽略2.0以上版本的maven-dependency-plugin的检查 -->  
				<pluginExecution>  
					<pluginExecutionFilter>  
						<groupId>org.apache.maven.plugins</groupId>  
						<artifactId>maven-dependency-plugin</artifactId>  
						<versionRange>[2.0,)</versionRange>  
						<goals>  
							<goal>copy-dependencies</goal>  
						</goals>  
					</pluginExecutionFilter>  
					<action>  
						<ignore />  
					</action>  
				</pluginExecution>  
			</pluginExecutions>  
		</lifecycleMappingMetadata>  
	</configuration>  
</plugin>  

<!-- 配置描述：把web项目的输出copy到tomcat的webapp下 maven-resources-plugin -->
<plugin>  
    <groupId>org.apache.maven.plugins</groupId>  
    <artifactId>maven-resources-plugin</artifactId>  
    <version>2.5</version>  
    <executions>  
        <execution>  
            <id>deploy-website</id>  
            <phase>package</phase>  
            <goals>  
                <goal>copy-resources</goal>  
            </goals>  
            <configuration>  
                <outputDirectory>${server_home}/webapps/${project.build.finalName}</outputDirectory>  
                <resources>  
                    <resource>  
                        <directory>${project.build.directory}/${project.build.finalName}</directory>  
                    </resource>  
                </resources>  
            </configuration>  
        </execution>  
    </executions>  
</plugin>  

<!--（现在知道原因了：antrun运行的bat文件，实际上是在basedir上运行bat文件里的内容，而tomcat的startup.bat文件在运行时会调用同目录下的其他bat文件，而这些bat文件在basedir上运行bat文件里的内容，而tomcat的startup.bat文件在运行时会调用同目录下的其他bat文件，而这些bat文件在{basedir}目录下不存在！
解决方法：使用令一个bat文件，如mystartup.bat运行startup.bat，注意在运行startup.bat之前，需要在mystartup.bat文件中把目录切换到startup.bat所在的目录，搞定！  -->
<plugin>  
    <artifactId>maven-antrun-plugin</artifactId>  
    <executions>  
      <execution>  
        <id>start-server</id>  
        <phase>package</phase>  
        <configuration>  
          <tasks>  
               <exec  
                 executable="${server_home}/bin/startup.bat"  
                 >  
               </exec>  
          </tasks>  
        </configuration>  
        <goals>  
          <goal>run</goal>  
        </goals>  
      </execution>  
    </executions>  
</plugin> 
</plugins>