一、linux环境相关配置 
#IPADDR=192.168.1.160
#NETMASK=255.255.255.0
#GATEWAY=192.168.1.1
#DNS1=119.29.29.29
#DNS2=8.8.8.8
yum install openssh-server
#关闭swap
# 查看已配置的swap
cat /proc/swaps
# 关闭swap
swapoff -a
# 永久关闭swap， 删除/etc/fstab文件中与swap相关的所有配置项
# Set SELinux in permissive mode (effectively disabling it)
setenforce 0
sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
# 安装三个组件
# 查看主机名称
hostname
# 设置主机名称
hostnamectl set-hostname [your-host-name]
# 停止firewall
systemctl stop firewalld.service
systemctl disable firewalld.service
# 安装docker
yum install docker
systemctl enable docker
sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json <<-'EOF'
{
  "registry-mirrors": ["https://43jugwwr.mirror.aliyuncs.com"]
}
EOF
sudo systemctl daemon-reload
sudo systemctl restart docker


yum install ntp
ntpdate ntp1.aliyun.com
cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
vim  /etc/sysconfig/clock
ZONE="Asia/Shanghai"
UTC=false
ARC=false
/usr/sbin/ntpdate -u cn.pool.ntp.org
hwclock -r



1.date                        //查看本地
2.hwclock --show                  //查看硬件的时间
3.如果硬件的时间是对不上，那就对硬件的时间进行修改、
4.hwclock --set --date '2016-01-08  15:15:15'    //设置硬件时间
5.hwclock  --hctosys                //设置系统时间和硬件时间同步
6.clock -w                        //保存时钟
二、配置阿里源并下载相关镜像
cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=0
repo_gpgcheck=0
gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
EOF
yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
# 设置kubelet开机启动
systemctl enable --now kubelet

kubeadm config images list
1.docker pull镜像拉取命令
docker pull docker.io/mirrorgcrio/kube-apiserver:v1.18.3
docker pull docker.io/mirrorgcrio/kube-controller-manager:v1.18.3
docker pull docker.io/mirrorgcrio/kube-scheduler:v1.18.3
docker pull docker.io/mirrorgcrio/kube-proxy:v1.18.3
docker pull docker.io/mirrorgcrio/pause:3.2
docker pull docker.io/mirrorgcrio/etcd:3.4.3-0
docker pull docker.io/mirrorgcrio/coredns:1.6.7



docker pull quay-mirror.qiniu.com/coreos/flannel:v0.12.0-amd64

2.docker tag镜像重命名
docker tag docker.io/mirrorgcrio/kube-apiserver:v1.18.3 k8s.gcr.io/kube-apiserver:v1.18.3
docker tag docker.io/mirrorgcrio/kube-controller-manager:v1.18.3 k8s.gcr.io/kube-controller-manager:v1.18.3
docker tag docker.io/mirrorgcrio/kube-scheduler:v1.18.3 k8s.gcr.io/kube-scheduler:v1.18.3
docker tag docker.io/mirrorgcrio/kube-proxy:v1.18.3 k8s.gcr.io/kube-proxy:v1.18.3
docker tag docker.io/mirrorgcrio/pause:3.2 k8s.gcr.io/pause:3.2
docker tag docker.io/mirrorgcrio/etcd:3.4.3-0 k8s.gcr.io/etcd:3.4.3-0
docker tag docker.io/mirrorgcrio/coredns:1.6.7 k8s.gcr.io/coredns:1.6.7


docker tag quay-mirror.qiniu.com/coreos/flannel:v0.12.0-amd64 quay.io/coreos/flannel:v0.12.0-amd64

3.docker image rm命令删除原始镜像
docker rmi docker.io/mirrorgcrio/kube-proxy:v1.18.3
docker rmi docker.io/mirrorgcrio/kube-controller-manager:v1.18.3
docker rmi docker.io/mirrorgcrio/kube-scheduler:v1.18.3
docker rmi docker.io/mirrorgcrio/kube-proxy:v1.18.3
docker rmi docker.io/mirrorgcrio/pause:3.2
docker rmi docker.io/mirrorgcrio/etcd:3.4.3-0
docker rmi docker.io/mirrorgcrio/coredns:1.6.7

docker rmi quay-mirror.qiniu.com/coreos/flannel:v0.12.0-amd64

三、设置k8s内核参数
cat <<EOF > /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables=1
net.bridge.bridge-nf-call-iptables=1
net.ipv4.ip_forward=1
EOF
sysctl -p /etc/sysctl.d/k8s.conf
#启动kubernetes，并设置开机自启动
systemctl enable kubelet && systemctl start kubelet
#注意，此时kubelet是无法正常启动的，可以查看/var/log/messages有报错信息
#等待执行初始化之后即可正常，为正常现象，以上步骤请在Kubernetes的所有节点上执行

四、初始化集群
#master节点，执行初始化命令
#--apiserver-advertise-address：指定用 Master 的哪个IP地址与 Cluster的其他节点通信。
#--service-cidr：指定Service网络的范围，即负载均衡VIP使用的IP地址段。
#--pod-network-cidr：指定Pod网络的范围，即Pod的IP地址段。
#--image-repository：Kubenetes默认Registries地址是 k8s.gcr.io，在国内并不能访问 gcr.io，在1.13版本中我们可以增加-image-repository参数，默认值是 k8s.gcr.io，将其指定为阿里云镜像地址：registry.aliyuncs.com/google_containers。
#--kubernetes-version=v1.13.3：指定要安装的版本号。
#–ignore-preflight-errors=：忽略运行时的错误，例如上面目前存在[ERROR NumCPU]和[ERROR Swap]，忽略这两个报错就是增加
#–ignore-preflight-errors=NumCPU
#–ignore-preflight-errors=Swap
kubeadm init --kubernetes-version=v1.18.3 --apiserver-advertise-address 192.168.0.171 --pod-network-cidr=10.244.0.0/16


#To start using your cluster, you need to run the following as a regular user:
#主从结点都要执行 并且要把主结点 /etc/kubernetes/admin.conf 复制到从结点对应目录
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

#master节点上配置kubectl
#所有结点都要执行
echo "export KUBECONFIG=/etc/kubernetes/admin.conf" >> /etc/profile
source /etc/profile 
echo $KUBECONFIG

五、安装pod网络
sysctl net.bridge.bridge-nf-call-iptables=1
vim kube-flannel.yaml
kubectl apply -f kube-flannel.yml


#You should now deploy a pod network to the cluster.
#https://kubernetes.io/docs/concepts/cluster-administration/addons/
kubectl apply -f [podnetwork].yaml
#Then you can join any number of worker nodes by running the following on each as root:
kubeadm join 192.168.0.171:6443 --token sw4rw8.lowckx8xsvspzp2r --discovery-token-ca-cert-hash sha256:e000d595d1823b9b9696e2ea2868f246ac1032b109cb8d4aca59ed8f30af6f98
systemctl status kubelet
journalctl -xeu kubelet

https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
https://199.232.4.133/coreos/flannel/master/Documentation/kube-flannel.yml
podsecuritypolicy.policy/psp.flannel.unprivileged created
clusterrole.rbac.authorization.k8s.io/flannel configured
clusterrolebinding.rbac.authorization.k8s.io/flannel unchanged
serviceaccount/flannel unchanged
configmap/kube-flannel-cfg unchanged
daemonset.apps/kube-flannel-ds-amd64 created
daemonset.apps/kube-flannel-ds-arm64 created
daemonset.apps/kube-flannel-ds-arm created
daemonset.apps/kube-flannel-ds-ppc64le created
daemonset.apps/kube-flannel-ds-s390x created

六、校验安装结果
#查看master的pod状态
kubectl get pods --all-namespaces -o wide
kubectl get nodes
kubectl get cs
#全部都为ready表示启动成功，如果有pod状态不为running，节点notReady，可以通过日志去排查问题
journalctl -f -u kubelet
#也可以通过如下地址去查看一些常见的问题 init或者join失败，kubeadm reset重置，再试
#https://blog.csdn.net/qq_34857250/article/details/82562514


#在master结点查看加入集群命令
kubeadm token create --print-join-command 
#token过期，节点重新加入集群 查看token值
kubeadm token list
#创建一条永久的token，不会过期，不安全不推荐
kubeadm token create --ttl 0
blxtni.0eq2uh88bublagaz

#获取ca证书sha256编码hash值
openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
e000d595d1823b9b9696e2ea2868f246ac1032b109cb8d4aca59ed8f30af6f98
#通过新生成的 token 和 ca 证书sha256编码hash值重新组装得到有效的加入集群命令，加入之前，可以把之前加入的节点先删除
kubectl delete node k8s-node1
kubeadm reset
scp admin.conf root@192.168.0.172:/etc/kubernetes/
rm -rf $HOME/.kube
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
echo "export KUBECONFIG=/etc/kubernetes/admin.conf" >> /etc/profile
source /etc/profile 
echo $KUBECONFIG

kubeadm join 192.168.0.171:6443 --token blxtni.0eq2uh88bublagaz --discovery-token-ca-cert-hash sha256:e000d595d1823b9b9696e2ea2868f246ac1032b109cb8d4aca59ed8f30af6f98
kubeadm join 192.168.0.171:6443 --token s7oubu.c7u3e49q69mpfe2p --discovery-token-ca-cert-hash sha256:e000d595d1823b9b9696e2ea2868f246ac1032b109cb8d4aca59ed8f30af6f98
kubeadm join 192.168.0.171:6443 --token fktmtt.i2cxzbt4ytdl5xrt --discovery-token-ca-cert-hash sha256:e000d595d1823b9b9696e2ea2868f246ac1032b109cb8d4aca59ed8f30af6f98

七、安装dashboard
#创建Dashboard的yaml文件
wget https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml
sed -i 's/k8s.gcr.io/loveone/g' kubernetes-dashboard.yaml
sed -i '/targetPort:/a\ \ \ \ \ \ nodePort: 30001\n\ \ type: NodePort' kubernetes-dashboard.yaml
#更换kubernetes-dashboard.yaml的image源，更换成可以访问的image
vim kubernetes-dashboard.yaml
image: registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.8.3
kubectl create -f kubernetes-dashboard.yaml
#部署Dashboard
kubectl create -f kubernetes-dashboard.yaml
kubectl delete -f kubernetes-dashboard.yaml
#创建完成后，检查相关服务运行状态
kubectl get deployment kubernetes-dashboard -n kube-system
kubectl get pods -n kube-system -o wide
kubectl get services -n kube-system
netstat -ntlp|grep 30001
#在Firefox浏览器输入Dashboard访问地址：
https://192.168.137.4:30001
#查看访问Dashboard的认证令牌
kubectl create serviceaccount  dashboard-admin -n kube-system
kubectl create clusterrolebinding  dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin
kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk '/dashboard-admin/{print $1}')




//永久性的修改主机名称，重启后能保持修改后的。
hostnamectl set-hostname xxx    
//删除hostname
hostnamectl set-hostname ""
hostnamectl set-hostname "" --static
hostnamectl set-hostname "" --pretty

service sshd start

kubeadm init --kubernetes-version=v1.11.2 --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=192.168.11.90 --token-ttl 0


八、安装最新版本dashvoad v2.0.1
https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.1/aio/deploy/recommended.yaml
199.232.68.133  raw.githubusercontent.com
##单独放一个 namespace，下面是创建 kubernetes-dashboard namespace
kubectl  create namespace kubernetes-dashboard
##把生成的免费证书存放在 $HOME/certs 目录下，取名为 tls.crt 和 tls.key
mkdir $HOME/certs
##创建 ssl 证书 secret
kubectl create secret generic kubernetes-dashboard-certs --from-file=$HOME/certs -n kubernetes-dashboard
##拉取 k8s dashboard yaml 配置
wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta6/aio/deploy/recommended.yaml
wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.1/aio/deploy/recommended.yaml
#修改 Deployment yaml 配置，具体修改见下面配置
$ vim recommended.yaml

# 把创建 kubernetes-dashboard-certs Secret 注释掉，前面已通过命令创建

#apiVersion: v1
#kind: Secret
#metadata:
#  labels:
#    k8s-app: kubernetes-dashboard
#  name: kubernetes-dashboard-certs
#  namespace: kubernetes-dashboard
#type: Opaque

# 添加ssl证书路径，关闭自动更新证书，添加多长时间登出

      containers:
      - args:
        #- --auto-generate-certificates
        - --tls-cert-file=/tls.crt
        - --tls-key-file=/tls.key
        - --token-ttl=3600
##部署 k8s dashboard
kubectl  apply -f recommended.yaml
##查看
kubectl  get pods -n kubernetes-dashboard
##创建 admin-user 管理员 yaml 配置
vim create-admin.yaml
##创建
kubectl apply -f create-admin.yaml
##查看登陆token
kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk '{print $1}')
kubectl get pods --namespace=kubernetes-dashboard -o wide

kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep kubernetes-dashboard | awk '{print $1}')
kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep dashboard-admin | awk '{print $1}')
##证书
下面是生成 k8s dashboard 域名证书方法，任何一种都可以

    通过 https://freessl.cn 网站，在线生成免费1年的证书
    通过 Let’s Encrypt 生成 90天 免费证书
    通过 Cert-Manager 服务来生成和管理证书


hariko.com
_dnsauth
202005290950263jm02ixi3f8wae13ij3ytchg0yvg8l76ilg8vk83yoo3xef050



九、问题
##命名空间正在中止状态
kubectl get ns kubernetes-dashboard -o json > kubernetes-dashboard.json
##删除dev.json的中的删除文件中spec.finalizers字段
kubectl proxy --port=8081
curl -k -H "Content-Type: application/json" -X PUT --data-binary @kubernetes-dashboard.json http://127.0.0.1:8081/api/v1/namespaces/kubernetes-dashboard/finalize

##修改pod配置
kubectl -n kubernetes-dashboard edit svc kubernetes-dashboard
##查看所有命名空间下的服务
kubectl get svc --all-namespaces -o wide
kubectl get pods --all-namespaces -o wide
kubectl get deployment --all-namespaces -o wide



十、证书创建
mkdir dashboard-certs

cd dashboard-certs/

#创建命名空间
kubectl create namespace kubernetes-dashboard

# 创建key文件
openssl genrsa -out dashboard.key 2048

#证书请求
openssl req -days 36000 -new -out dashboard.csr -key dashboard.key -subj '/CN=dashboard-cert'

#自签证书
openssl x509 -req -in dashboard.csr -signkey dashboard.key -out dashboard.crt

#创建kubernetes-dashboard-certs对象
kubectl create secret generic kubernetes-dashboard-certs --from-file=dashboard.key --from-file=dashboard.crt -n kubernetes-dashboard


十一、删除dashboard
kubectl get secret,sa,role,rolebinding,services,deployments,rs --namespace=kubernetes-dashboard | grep dashboard

kubectl delete deployment kubernetes-dashboard --namespace=kubernetes-dashboard
kubectl delete service kubernetes-dashboard  --namespace=kubernetes-dashboard
kubectl delete role kubernetes-dashboard-minimal --namespace=kubernetes-dashboard
kubectl delete rolebinding kubernetes-dashboard-minimal --namespace=kubernetes-dashboard
kubectl delete sa kubernetes-dashboard --namespace=kubernetes-dashboard
kubectl delete secret kubernetes-dashboard-certs --namespace=kubernetes-dashboard
kubectl delete secret kubernetes-dashboard-key-holder --namespace=kubernetes-dashboard

kubectl delete secret kubernetes-dashboard-csrf --namespace=kubernetes-dashboard
kubectl delete secret kubernetes-dashboard-token-ft7ts --namespace=kubernetes-dashboard

kubectl delete role kubernetes-dashboard --namespace=kubernetes-dashboard
kubectl delete rolebinding kubernetes-dashboard --namespace=kubernetes-dashboard

kubectl delete deployment dashboard-metrics-scraper --namespace=kubernetes-dashboard

kubectl delete service dashboard-metrics-scraper  --namespace=kubernetes-dashboard
kubectl delete pod dashboard-metrics-scraper-6b4884c9d5-cxwrt  --namespace=kubernetes-dashboard
kubectl delete pod kubernetes-dashboard-7bfbb48676-q7dmk  --namespace=kubernetes-dashboard


十二、token
kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep dashboard-admin | awk '{print $1}')

Name:         dashboard-admin-token-k9zww
Namespace:    kubernetes-dashboard
Labels:       <none>
Annotations:  kubernetes.io/service-account.name: dashboard-admin
              kubernetes.io/service-account.uid: 591251cc-f62d-4455-82a3-e29d7aef5ae7

Type:  kubernetes.io/service-account-token

Data
====
ca.crt:     1025 bytes
namespace:  20 bytes
token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IkpBYlZPX2hiVENoZ3FINm1nUWxWZEtZZlZjLU53SmNiX3RpSGFEcXpVSWsifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4tazl6d3ciLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiNTkxMjUxY2MtZjYyZC00NDU1LTgyYTMtZTI5ZDdhZWY1YWU3Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmVybmV0ZXMtZGFzaGJvYXJkOmRhc2hib2FyZC1hZG1pbiJ9.AVClglu5tUA_k55Y-ovdPWZ-GqH71RJpqFzX_kJwjq8oDfX00muyHK3n8Cq-kitv79xLAGRy3k21HSGM_9H5gLD_mh5YvsGx3YlRS8uJMKjAdfNtqSIn6KFQcDoNwMudlOhHlcqmZVYzr6G8DCsSWrzaPk9FY4SLkTlrRCMTITz8v3NxatXiHio7o1lEAGORB2ON3nGQJxlaDUUB5X_Jq8YRRNvFz2HanmIvbOBNQVMtA3htAmfzs-6rRyvWX7g03ybw-SOYbhJwEsj3v_KchA_Q7SvpYAuKqhKg_vqutXHTTpXivA42OznmBqnCHJwbInANZwEGObbD3-i7tDytkQ
