
#user  nobody;
#第一部分:全局块 
#设置一些影响nginx服务器整体运行的配置指令
#主要包括 用户级、允许生成的worker process数、进行PID存放路径、日志文件类型以及配置文件的引入等
#越大越支持并发
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

#第二部分:events块
#主要影响Nginx服务器与用户的网络连接,常用设置包括
#是否允许同时接收多个网络连接、选取哪种事件驱动模型来处理连接请求、
#每个work process可以同时支持的最大连接数
events {
    worker_connections  1024;
}

#第三部分:http块  http全局块 server块
#http全局块:文件引入、MIME-TYPE定义、日志自定义、连接超时时间、间链接请求数上限
http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location /nginx-status {
			stub_status on;
			access_log off;
        }

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #当访问的路径匹配这个正则表达式时
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}

    }
	
	#反向代理实验一(server部分一样)
	#192.168.0.130:80(一般为域名hosts文件修改)->192.168.0.130:8080
	server {
        listen       9001;
        server_name  192.168.0.130;
		
		location / {
			proxy_pass http://127.0.0.1:8080;	
		    root   html;
            index  index.html index.htm;
		}
	}	
	
	#反向代理实验二(server部分一样)
	#~和~*代表是正则表达式不区分大小写,后者大小写
	#=严格匹配
	#192.168.0.130:80/edu/->192.168.0.130:8080
	#192.168.0.130:80/vod/->192.168.0.130:8081
	server {
        listen       9002;
        server_name  192.168.0.130;
		
		location ~ /edu/ {
			proxy_pass http://127.0.0.1:8080;	
		    root   html;
            index  index.html index.htm;
		}
		location ~ /vod/ {
			proxy_pass http://127.0.0.1:8081;	
		    root   html;
            index  index.html index.htm;
		}
	}	
	
	#负载均衡
	#192.168.0.130:80/edu/a.html->192.168.0.130:8080 192.168.0.130:8081
	#a:ip_hash是每个请求按照访问ip的hash结果分配,指到同一个后端服务器
	#b:按时间顺序轮询
	#c:按weigth的值
	#d:fair按后端服务器的响应时间来分配请求,响应时间短的优先分配
	upstream myserver {
		ip_hash;
		server 192.168.0.130:8080 weight=1;
		server 192.168.0.130:8081 weight=1;
	}
	server {
        listen       9003;
        server_name  192.168.0.130;
		
		location / {
			proxy_pass http://myserver;	
		    root   html;
            index  index.html index.htm;
		}
	}	
	
	#动静分离
	#a:静态资源放在单独的服务器上和后台服务器分开部署
	#b:动态资源请求和静态资源请求
	server {
        listen       9004;
        server_name  192.168.0.130;
		
		location /www/ {
		    root   /data/;
            index  index.html index.htm;
		}
		
		location /image/ {
		    root   /data/;
			#Nginx默认是不允许列出整个目录的
			autoindex	on;
            index  index.html index.htm;
		}
	}
	
	#高可用
	#一个master,一个backup往外映射成一个虚拟ip
	#安装(keepalived) yum install keepalived -y
	
	

    server {
         listen 81;
         server_name nginx.test.com;
         location / {
		root	html;
		index	index.html index.htm;
	 }	 
    }

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
