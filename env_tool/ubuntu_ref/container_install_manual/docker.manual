#1.使用Ubuntu软件仓库安装 docker
sudo apt install docker.io
#其他方式请参考下面链接
https://docs.docker.com/install/linux/docker-ce/ubuntu/
#2.安装完成后，需要配置免sudo
sudo groupadd docker (会提醒已经存在组 docker)
sudo gpasswd -a ${USER} docker
#然后重启docker
sudo systemctl restart docker
#然后执行下面更新组信息命令
newgrp - docker
#3.取消/添加docker自启动
sudo systemctl disable docker # 取消
sudo systemctl enable docker # 添加


#4.相关命令介绍
#4.1启动容器
docker search mysql
docker pull mysql:8.0.18
docker run --name hariko_tomcat -d tomcat:latest
docker run --name hariko_tomcat -d -p 8888:8080 tomcat:latest
	     #-it 交互模式启动,如果是操作系统时
             #-d 后台模式
#4.2查看启动的相关进程
docker ps -a #-a 表示显示所有的容器
             #-l 表示上一个启动的容器
             #-n 2 表示上2个启动的容器
             #-q 只显示容器的id
#4.3删除不需要的镜象
docker rmi tomcat:lastest
#4.4停止运行中的容器
docker stop container id #容器不停止退出 ctrl + p + q
docker kill container id
docker start container id
docker restart container id
docker rm container id  #rm 删除容器 rmi 删除镜像
docker logs container id #查看容器的启动日志
		         #-t 是加入时间戳
                         #-f 跟随最新的日志打印
                         #--tail 数字显示最后多少条
#4.5启动mysql
docker run --name mysql_8887 -e MYSQL_ROOT_PASSWORD=hariko -d -p 8887:3306 mysql:8.0.19
#4.6一次性删除多个容器
docker rm -f $(docker ps -a -q)
docker ps -a -q | xargs docker rm
#4.7查看容器内部细节
docker inspect container id #结果是一串json
#4.8
docker exec -t container id #直接进入容器启动命令的终端,不会启动新的进程
docker attach container id #是打开新的终端,并且可以启动新的进程

#5好玩的命令
#5.1后台启动linux模拟前台响应
docker run -d centos /bin/sh -c "while true;do echo hello zzyy;sleep 2;done"


#6.数据卷
docker run -it -v /宿主机绝对目录:/容器内目录 container id

#7.下载镜象加速
#在/etc/docker/daemon.json中加入 {"registry-mirrors":["https://registry.docker-cn.com"]}
docker pull registry.docker-cn.com/library/ubuntu:16.04

#8.docker容器中修改mysql密码
docker exec -it mysql /bin/bash
vi /etc/mysql/my.cnf #最后一行添加skip-grant-tables
docker restart mysql
mysql -u root -p
update mysql.user set passwrd=“新密码” where ''User" = “username”;

#9.docker主机复制文件
docker cp mysql_8887:/etc/mysql/my.cnf /opt/source/docker/master/my.cnf
docker network create --subnet 172.18.0.0/24 hariko_net #创建一个mysql的子网
docker run -dit --network hariko_net --ip 172.18.0.10 -v /home/hariko/Downloads/baidu/hariko/ubuntu_ref/mysql_install_manual/master/my.cnf:/etc/mysql/my.cnf --name mysql_m_8885 -p 8885:3306 -e MYSQL_ROOT_PASSWORD=hariko mysql:8.0.19
docker run -dit --network hariko_net --ip 172.18.0.11 -v /home/hariko/Downloads/baidu/hariko/ubuntu_ref/mysql_install_manual/slave/my.cnf:/etc/mysql/my.cnf --name mysql_s_8886 -p 8886:3306 -e MYSQL_ROOT_PASSWORD=hariko mysql:8.0.19
docker run -dit --network hariko_net --ip 172.18.0.12 --name mysql_activiti_8887 -p 8887:3306 -e MYSQL_ROOT_PASSWORD=hariko mysql:5.7.30
docker run -dit --network hariko_net --ip 172.18.0.12 -v /home/hariko/Downloads/baidu/hariko/ubuntu_ref/mysql_install_manual/activiti/my.cnf:/etc/mysql/my.cnf --name mysql_activiti_8887 -p 8887:3306 -e MYSQL_ROOT_PASSWORD=hariko mysql:5.7.30
#10.docker轻量级管理工具
docker run -d -p 9000:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --name prtainer-test portainer/portainer
#11.docker hadoop 集群安装
docker run -dit --network hariko_net --ip 172.18.0.20 --name hadoop_master sequenceiq/hadoop-docker
