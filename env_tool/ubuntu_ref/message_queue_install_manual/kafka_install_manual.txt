1.下载kafka、zookeeper

2.tar -zxvf 解压 cp -r /soft/ /usr/app

3.修改配置
本地内存没有那么多  vi /bin/kafka-server-start.sh
export KAFKA_HEAP_OPTS="-Xmx1G -Xms1G"   export KAFKA_HEAP_OPTS="-Xmx256M -Xms128M"



#每一个broker在集群中的唯一表示，要求是正数。当该服务器的IP地址发生改变时，broker.id没有变化，则不会影响consumers的消息情况
broker.id=1
#kafka数据的存放地址，多个地址的话用逗号分割。
log.dirs=/usr/app/kafka_2.12-2.3.0/logs
#监听地址
listeners=PLAINTEXT://192.168.0.127:9092
#broker server服务端口
port=9092
#表示消息体的最大大小，单位是字节
message.max.bytes=6525000
#broker处理消息的最大线程数
num.network.threads=4
#broker处理磁盘IO的线程数，数值应该大于你的硬盘数
num.io.threads=8
#一些后台任务处理的线程数
background.threads=4
#等待IO线程处理的请求队列最大数。
queued.max.requests=500
#broker的主机地址，若是设置了，那么会绑定到这个地址上，若是没有，会绑定到所有的接口上，并将其中之一发送到ZK，一般不设置
host.name
#socket的发送缓冲区
socket.send.buffer.bytes=102400
#socket的接受缓冲区
socket.receive.buffer.bytes=102400
#socket请求的最大数值，防止serverOOM，message.max.bytes必然要小于		socket.request.max.bytes，会被topic创建时的指定参数覆盖
socket.request.max.bytes=102400000
#topic的分区是以一堆segment文件存储的，这个控制每个segment的大小，会被topic创建时的指定参数覆盖
log.segment.bytes=1024000000
#这个参数会在日志segment没有达到log.segment.bytes设置的大小，也会强制新建一个segment会被 topic创建时的指定参数覆盖
log.roll.hours=168
#日志清理策略选择有：delete和compact
log.cleanup.policy=delete
#数据存储的最大时间超过这个时间会根据log.cleanup.policy设置的策略处理数据，也就是消费端能够多久去消费数据
#log.retention.bytes和log.retention.minutes任意一个达到要求，都会执行删除，会被topic创建时的指定参数覆盖
log.retention.minutes=1440
#topic每个分区的最大文件大小，一个topic的大小限制 = 分区数*log.retention.bytes。-1没有大小限log.retention.bytes和log.retention.minutes任意一个达到要求，都会执行删除，会被topic创建时的指定参数覆盖
log.retention.bytes=-1
#文件大小检查的周期时间，是否处罚 log.cleanup.policy中设置的策略
log.retention.check.interval.ms=18000
#是否开启日志压缩
log.cleaner.enable=false
#日志压缩运行的线程数
log.cleaner.threads = 2
#日志压缩时候处理的最大大小
#log.cleaner.io.max.bytes.per.second=None
#日志压缩去重时候的缓存空间，在空间允许的情况下，越大越好
log.cleaner.dedupe.buffer.size=524288000
#日志清理时候用到的IO块大小一般不需要修改
log.cleaner.io.buffer.size=524288
#日志清理中hash表的扩大因子一般不需要修改
log.cleaner.io.buffer.load.factor=0.9
#检查是否处罚日志清理的间隔
log.cleaner.backoff.ms=15000
#日志清理的频率控制，越大意味着更高效的清理，同时会存在一些空间上的浪费，会被topic创建时的指定参数覆盖
log.cleaner.min.cleanable.ratio=0.5
#对于压缩的日志保留的最长时间，也是客户端消费消息的最长时间，同log.retention.minutes的区别在于一个控制未压缩数据，一个控制压缩后的数据。会被topic创建时的指定参数覆盖
log.cleaner.delete.retention.ms=1440000
#对于segment日志的索引文件大小限制，会被topic创建时的指定参数覆盖
log.index.size.max.bytes=10485760
#当执行一个fetch操作后，需要一定的空间来扫描最近的offset大小，设置越大，代表扫描速度越快，但是也更好内存，一般情况下不需要搭理这个参数
log.index.interval.bytes=4096
#log文件”sync”到磁盘之前累积的消息条数,因为磁盘IO操作是一个慢操作,但又是一个”数据可靠性"的必要手段,所以此参数的设置,需要在"数据可靠性"与"性能"之间做必要的权衡.如果此值过大,将会导致每次"fsync"的时间较长(IO阻塞),如果此值过小,将会导致"fsync"的次数较多,这也意味着整体的client请求有一定的延迟.物理server故障,将会导致没有fsync的消息丢失.
#log.flush.interval.messages=None
#检查是否需要固化到硬盘的时间间隔
log.flush.scheduler.interval.ms=3000
#仅仅通过interval来控制消息的磁盘写入时机,是不足的.此参数用于控制"fsync"的时间间隔,如果消息量始终没有达到阀值,但是离上一次磁盘同步的时间间隔达到阀值,也将触发.
#log.flush.interval.ms=None
#文件在索引中清除后保留的时间一般不需要去修改
log.delete.delay.ms=60000
#控制上次固化硬盘的时间点，以便于数据恢复一般不需要去修改
log.flush.offset.checkpoint.interval.ms=60000
#是否允许自动创建topic，若是false，就需要通过命令创建topic
auto.create.topics.enable=true
#是否允许自动创建topic，若是false，就需要通过命令创建topic
default.replication.factor=1
#每个topic的分区个数，若是在topic创建时候没有指定的话会被topic创建时的指定参数覆盖
num.partitions=1

####################kafka中Leader,replicas#####################
#partition leader与replicas之间通讯时,socket的超时时间
controller.socket.timeout.ms=30000
#partition leader与replicas数据同步时,消息的队列尺寸
controller.message.queue.size=10
#replicas响应partition leader的最长等待时间，若是超过这个时间，就将replicas列入ISR(in-sync replicas)，并认为它是死的，不会再加入管理中
replica.lag.time.max.ms=10000
#如果follower落后与leader太多,将会认为此follower[或者说partition relicas]已经失效
##通常,在follower与leader通讯时,因为网络延迟或者链接断开,总会导致replicas中消息同步滞后
##如果消息之后太多,leader将认为此follower网络延迟较大或者消息吞吐能力有限,将会把此replicas迁移
##到其他follower中.
##在broker数量较少,或者网络不足的环境中,建议提高此值.
replica.lag.max.messages=4000
#follower与leader之间的socket超时时间
replica.socket.timeout.ms=30000
#leader复制时候的socket缓存大小
replica.socket.receive.buffer.bytes=65536
#replicas每次获取数据的最大大小
replica.fetch.max.bytes=1048576
#replicas同leader之间通信的最大等待时间，失败了会重试
replica.fetch.wait.max.ms=500
#fetch的最小数据尺寸,如果leader中尚未同步的数据不足此值,将会阻塞,直到满足条件
replica.fetch.min.bytes=1
#leader进行复制的线程数，增大这个数值会增加follower的IO
num.replica.fetchers=1
#每个replica检查是否将最高水位进行固化的频率
replica.high.watermark.checkpoint.interval.ms =5000
#是否允许控制器关闭broker ,若是设置为true,会关闭所有在这个broker上的leader，并转移到其他broker
controlled.shutdown.enable=false
#控制器关闭的尝试次数
controlled.shutdown.max.retries=3
#每次关闭尝试的时间间隔
controlled.shutdown.retry.backoff.ms=5000
#leader的不平衡比例，若是超过这个数值，会对分区进行重新的平衡
leader.imbalance.per.broker.percentage=10	
#检查leader是否不平衡的时间间隔
leader.imbalance.check.interval.seconds=300
#客户端保留offset信息的最大空间大小
#offset.metadata.max.bytes
##########################kafka中zookeeper参数配置########################

#zookeeper集群的地址，可以是多个，多个之间用逗号分割 	hostname1:port1,hostname2:port2,hostname3:port3
zookeeper.connect=192.168.0.127:2181,192.168.0.128:2181,192.168.0.129:2181
#ZooKeeper的最大超时时间，就是心跳的间隔，若是没有反映，那么认为已经死了，不易过大
zookeeper.session.timeout.ms=600000
#ZooKeeper的连接超时时间
zookeeper.connection.timeout.ms=600000
zookeeper.sync.time.ms=200000

启动服务
启动Zookeeper server：
bin/zookeeper-server-start.sh config/zookeeper.properties &

启动Kafka server:
bin/kafka-server-start.sh config/server.properties &

停止Kafka server:
bin/kafka-server-stop.sh

停止Zookeeper server: 
bin/zookeeper-server-stop.sh

启动kafka服务器
bin/kafka-server-start.sh config/server.properties &
bin/kafka-server-start.sh -deamon config/server.properties &
sh /usr/app/kafka_2.12-2.3.0/bin/kafka-server-start.sh -daemon /usr/app/kafka_2.12-2.3.0/config/server.properties

kafka相关操作
创建topic
bin/kafka-topics.sh --create --zookeeper 192.168.0.163:2181 --replication-factor 1 --partitions 1 --topic api-log-topic
查看topic list
bin/kafka-topics.sh --list --zookeeper 192.100.36.183:2181
查看某个具体topic的信息
bin/kafka-topics.sh  --describe --zookeeper 192.100.36.183:2181 --topic api-log-topic
创建生产者
bin/kafka-console-producer.sh --broker-list 192.100.36.183:2181 --topic api-log-topic
创建消费者
./kafka-topics.sh --create --zookeeper 192.100.36.183:2181 --replication-factor 1 --partitions 1 --topic test
./kafka-console-producer.sh --broker-list 10.48.92.203:9092 --topic test
./kafka-console-consumer.sh --bootstrap-server 10.48.92.203:9092 --topic test --from-beginning